@    using BlazorServerAppBanco.ModelsDTO;
@    using BlazorServerAppBanco.Services;
    using BlazorServerAppBanco.ModelsDTO.Users;

@page "/secUserC"
@inject ILogger<SecUserDTO> logger;
@inject ISecUserService secUserService;
@inject NavigationManager navigationManager;
@inject IJSRuntime JSRuntime;


<PageTitle>SecUsers</PageTitle>
<h3>SecUsers</h3>

<h1>Users</h1>

<button class="btn btn-primary" @onclick="GoToAddUsers">Go to addProducts</button>

@if (users?.Count() > 0)
{
    <div class="users-container">
        <table class="table">
            <thead>
                <tr>
                    <th>Usuario</th>
                    <th>Nombre</th>
                    <th>Correo</th>
                    <th>Estado</th>
                    <th>Tipo usuario</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in users)
                {
                    <tr>
                        <td>@user.Login</td>
                        <td>@user.Name</td>
                        <td>@user.Email</td>
                        <td>@(user.UsrActive == "Y" ? "Activo" : "Inactivo")</td>
                        <td>por definir</td>
                        <td>
                            <MudButton Variant="Variant.Filled" Color="Color.Info" @onclick="@(() => GoToUpdateUsers(user.Login))">a</MudButton>
                                
                            <MudButton Variant="Variant.Filled" Color="Color.Error" @onclick="@(() => deleteUsers(user))">e</MudButton>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else
{
    <p>No existen usuarios</p>
}

@code {
    private List<SecUserDTO>? users;

    protected override async Task OnInitializedAsync()
    {
        await Get();
    }

    public async Task Get()
    {
        users = await secUserService.GetAll();
    }

    private void GoToAddUsers()
    {
        navigationManager.NavigateTo("/addUser");
    }

    private void GoToUpdateUsers(string userId)
    {
        navigationManager.NavigateTo($"/updateUser/{userId}");
    }

    private async Task deleteUsers(SecUserDTO user)
    {
        var confirmation = await JSRuntime.InvokeAsync<bool>("showSweetAlert", "Eliminar registro?", $"esta seguro que desea eliminar {user.Name}?");
        if (!confirmation)
        {
            return;
        }
        await secUserService.Delete(user.Login);
        await Get();
    }
}

<script src="alerts.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
 